basePath: /api/v1
definitions:
  dto.CreateTask:
    properties:
      text:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  dto.GetTask:
    properties:
      completed:
        type: boolean
      id:
        type: string
      text:
        type: string
      title:
        type: string
    type: object
  dto.PostUser:
    properties:
      password:
        minLength: 8
        type: string
      username:
        minLength: 4
        type: string
    required:
    - password
    - username
    type: object
  services.LoginResult:
    properties:
      token:
        type: string
    type: object
host: localhost:9090
info:
  contact: {}
  description: A siple TODO task service
  title: TODOapp api
  version: "1.0"
paths:
  /auth/login:
    post:
      description: Checks the user data and returns a jwt token on correct Login
      parameters:
      - description: Login details
        in: body
        name: details
        required: true
        schema:
          $ref: '#/definitions/dto.PostUser'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.LoginResult'
      summary: Logs in the user
      tags:
      - Auth
  /auth/register:
    post:
      description: Checks the user data and adds it to the repo
      parameters:
      - description: Register details
        in: body
        name: details
        required: true
        schema:
          $ref: '#/definitions/dto.PostUser'
      responses:
        "200":
          description: OK
      summary: Registers the user
      tags:
      - Auth
  /task:
    get:
      description: Fetches All of the user's tasks
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetTask'
            type: array
      summary: Fetch All tasks
      tags:
      - Tasks
    post:
      description: Creates a new user task
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        required: true
        type: string
      - description: new task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTask'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GetTask'
      summary: Creates a task
      tags:
      - Tasks
  /task/{taskId}:
    delete:
      description: Deletes the task
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Delete task
      tags:
      - Tasks
    get:
      description: Finds a task by it's task id
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetTask'
      summary: Find a task by id
      tags:
      - Tasks
    patch:
      description: Toggles the task's complete status
      parameters:
      - description: Authenticator
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetTask'
      summary: Toggle complete status
      tags:
      - Tasks
swagger: "2.0"
